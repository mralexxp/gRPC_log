// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pkg/proto/messages.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Messager_Messages_FullMethodName   = "/protobuf.Messager/Messages"
	Messager_NewMessage_FullMethodName = "/protobuf.Messager/NewMessage"
)

// MessagerClient is the client API for Messager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagerClient interface {
	Messages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Msg], error)
	NewMessage(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Empty, error)
}

type messagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagerClient(cc grpc.ClientConnInterface) MessagerClient {
	return &messagerClient{cc}
}

func (c *messagerClient) Messages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Msg], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Messager_ServiceDesc.Streams[0], Messager_Messages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Msg]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Messager_MessagesClient = grpc.ServerStreamingClient[Msg]

func (c *messagerClient) NewMessage(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Messager_NewMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagerServer is the server API for Messager service.
// All implementations must embed UnimplementedMessagerServer
// for forward compatibility.
type MessagerServer interface {
	Messages(*Empty, grpc.ServerStreamingServer[Msg]) error
	NewMessage(context.Context, *Msg) (*Empty, error)
	mustEmbedUnimplementedMessagerServer()
}

// UnimplementedMessagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessagerServer struct{}

func (UnimplementedMessagerServer) Messages(*Empty, grpc.ServerStreamingServer[Msg]) error {
	return status.Errorf(codes.Unimplemented, "method Messages not implemented")
}
func (UnimplementedMessagerServer) NewMessage(context.Context, *Msg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMessage not implemented")
}
func (UnimplementedMessagerServer) mustEmbedUnimplementedMessagerServer() {}
func (UnimplementedMessagerServer) testEmbeddedByValue()                  {}

// UnsafeMessagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagerServer will
// result in compilation errors.
type UnsafeMessagerServer interface {
	mustEmbedUnimplementedMessagerServer()
}

func RegisterMessagerServer(s grpc.ServiceRegistrar, srv MessagerServer) {
	// If the following call pancis, it indicates UnimplementedMessagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Messager_ServiceDesc, srv)
}

func _Messager_Messages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagerServer).Messages(m, &grpc.GenericServerStream[Empty, Msg]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Messager_MessagesServer = grpc.ServerStreamingServer[Msg]

func _Messager_NewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagerServer).NewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messager_NewMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagerServer).NewMessage(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

// Messager_ServiceDesc is the grpc.ServiceDesc for Messager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Messager",
	HandlerType: (*MessagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewMessage",
			Handler:    _Messager_NewMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Messages",
			Handler:       _Messager_Messages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/messages.proto",
}
